" vim: foldmethod=marker

""""""""""""""""""""""""""""
" Plugins 
""""""""""""""""""""""""""""
"{{{

" Install plugin manager

if empty(glob('~/.vim/autoload/plug.vim'))
  echo "Downloading junegunn/vim-plug to manage plugins..."
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Install plugins
call plug#begin('~/.vim/plugged')
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'christoomey/vim-sort-motion'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-line'
Plug 'godlygeek/tabular'
Plug 'con-f-use/vim-pythonindent'
Plug 'yhat/vim-docstring'
if !exists('g:vscode')
    Plug 'psf/black'
    Plug 'christoomey/vim-system-copy'
    Plug 'Yggdroot/indentLine'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-obsession'
    Plug 'google/vim-searchindex'
    Plug 'davidhalter/jedi-vim'
    Plug 'joshdick/onedark.vim'
endif
if has('nvim')
"    Plug 'rakr/vim-one'  
    Plug 'kassio/neoterm'
endif
call plug#end()

if exists('g:vscode')
"Emulate commentary in vscode
    xmap gc  <Plug>VSCodeCommentary
    nmap gc  <Plug>VSCodeCommentary
    omap gc  <Plug>VSCodeCommentary
    nmap gcc <Plug>VSCodeCommentaryLine
endif

"}}}

""""""""""""""""""""""""""""
"Settings
""""""""""""""""""""""""""""
"{{{
let mapleader ="\\"

set nocompatible
set encoding=utf-8 nobomb
"set ai          "Autoindet
set autoread
set mouse=a     "Use mouse
set clipboard=unnamedplus  "use system clipboard
set smarttab    "Smart Tabulator
set tabpagemax=50
set nobackup
set noswapfile
set smartcase   "Smat casematching
set dir=/tmp/   "Dir for swapfiles
set undofile    " persistent undos - undo after you re-open the file
set undodir=~/.vim/dirs/undos
if !isdirectory(&directory)
    call mkdir(&directory, "p")
endif
if !isdirectory(&undodir)
    call mkdir(&undodir, "p")
endif
set list                            " show invisible characters
set listchars=tab:»·,trail:·,nbsp:· " Display extra whitespace
set path+=**
set autochdir   "Follow files into dir
set tabstop=4   " width of a TAB character
set softtabstop=4  " Number of columns for a tab
set shiftwidth=4  " Indents have a witdh of 4 spaces
set expandtab   "Make spaces out of tabs
set shiftround  "Shift to next tab marker
set tw=79
set formatoptions-=t
filetype plugin on
filetype indent on
set nrformats-=octal
set laststatus=2
set wildmenu
set wildignore=*.swp,*.bak,*.pyc,*.class
set wildmode=list:longest,full   "Command mode completions behaves as in shell
set nostartofline   "keeps cursor in the same colum after movements
set ofu=syntaxcomplete#Complete
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview
set hidden      "Better buffer management
"set shortmess-=S  "Indexed search
set history=10000    "Longer history
set undolevels=1000
if !&scrolloff
  set scrolloff=3
endif
if !&sidescrolloff
  set sidescrolloff=8
endif
set display+=lastline
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j " Delete comment character when joining commented lines
endif
"set esckeys " Allow cursor keys in insert mode
set backspace=indent,eol,start " Allow backspace in insert mode
set ttyfast " Optimize for fast terminal connections
set gdefault " Add the g flag to search/replace by default
set exrc "  Enable per-directory .vimrc files
set secure " and disable unsafe commands in them
set sessionoptions-=options
set viewoptions-=options
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/systags
"}}}

"""""""""""""""""""""""""""""
" Ctags/Completion 
"""""""""""""""""""""""""""""
"{{{
" build tags of your own project with Ctrl-F12
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]


" autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType html setlocal sw=2 expandtab
autocmd FileType make setlocal noexpandtab
autocmd FileType sh setlocal commentstring=#\ %s
autocmd FileType python setlocal commentstring=#\ %s
autocmd FileType vim setlocal commentstring=\"\ %s

let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-n>"
set pastetoggle=<F2>

"}}}

""""""""""""""""""""""""""""""
" Styling 
""""""""""""""""""""""""""""""
"{{{
"colorscheme delek
syntax on   "Turn Syntax highlighting on
set number  "Display linenumbers
set relativenumber   "Linenumbers relative to cursor
"hi LineNr ctermbg=Blue
set wrap   "wrap long lines
set linebreak   "break at sensible chars
set showbreak=-->
set fillchars+=vert:│
hi VertSplit cterm=NONE ctermfg=3 ctermbg=NONE guibg=NONE
set ruler   "display line and cloumn ruler
set colorcolumn=80
highlight ColorColumn ctermbg=233
set incsearch   "Higlight while typing
set hlsearch    "Higlight all matches of a search
set visualbell  "terminal bell flashes screen
set noerrorbells "terminal bell makes no sound
set ls=2    "Always show status with filename
set cursorline  "Display line under cursor
let g:one_allow_italics = 1
if (empty($TMUX))
  if (has("nvim"))
  "For Neovim 0.1.3 and 0.1.4
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799
  if (has("termguicolors"))
    set termguicolors
  endif
endif
if (has("autocmd") && !has("gui_running"))
  augroup colorset
    autocmd!
    let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
    autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white }) " `bg` will not be styled since there is no `bg` setting
  augroup END
endif
colorscheme onedark
let s:black = { "gui": "#282C34", "cterm": "235", "cterm16": "0" }
let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
call onedark#set_highlight("Normal", { "fg": s:white }) " `bg` will not be styled since there is no `bg` setting
"call onedark#set_highlight("Normal", { "fg": s:white, "bg": s:black }) " normal text

"Filebrowser
let g:netrw_banner=0   " No header at the top
let g:netrw_liststyle=3 " tree view
"let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
"}}}

""""""""""""""""""""""""""""""
"Custom commands and maps 
""""""""""""""""""""""""""""""
"{{{

" Saving
    inoremap <leader>ww <Esc>:w<Enter>
    inoremap <leader>wq <Esc>:wq<Enter>
    command Wsudo :%!sudo tee > /dev/null %
    cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Navigating with guides
    inoremap <leader><leader> <Esc>/<++<Enter>"_cf>
    vnoremap <leader><leader> <Esc>/<++<Enter>"_cf>
    map <leader><leader> <Esc>/<++<Enter>"_cf>

" Tabbing
    set splitbelow splitright
    nnoremap <leader>e :Ex<CR>
    nnoremap <leader>t :tabnew<CR>:Ex<CR>
    nnoremap <leader>v :vsplit<CR>:w<CR>:Ex<CR>
    nnoremap <leader>s :split<CR>:w<CR>:Ex<CR>
    cnoreabbrev <expr> vsf getcmdtype() == ":" && getcmdline() == 'vsf' ? 'vert sf' : 'vsf'

" Shortcutting split navigation, saving a keypress:
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>lA

" Nvim Terminal stuff
set shell=xonsh
if has('nvim')
    let g:neoterm_size='70v'
    let g:neoterm_autoinsert=1
    " Use gx{text-object} in normal mode
    nmap gx <Plug>(neoterm-repl-send)
    " Send selected contents in visual mode.
    xmap gx <Plug>(neoterm-repl-send)
    tnoremap <C-h> <C-\><C-n><C-w>h
    tnoremap <C-j> <C-\><C-n><C-w>j
    tnoremap <C-k> <C-\><C-n><C-w>k
    tnoremap <C-l> <C-\><C-n><C-w>l
    tnoremap <leader><esc> <C-\><C-n><esc><cr>
    nnoremap <silent> <leader><space> :vertical botright Ttoggle<cr><C-w>l

    set guicursor=n-v-c:block,i-ci-ve:ver25,r-cr:hor20,o:hor50
        \,a:blinkwait700-blinkoff400-blinkon250-Cursor/lCursor
        \,sm:block-blinkwait175-blinkoff150-blinkon175
endif


" easier moving of code blocks
    vnoremap < <gv  " better indentation
    vnoremap > >gv  " better indentation

"Compiles current file as C/C++-Source and execute the result
    command -nargs=* Cit :w|!gcc -Wall -Werror -O0 -o %:r '%:p' && ./%:r <args><C-m>
"Removes als C-style comments from current fiel
    command Crem :%s/\s*\/\*\(.\|\n\)\{-}\*\/\n//|:%s/\s*\/\/.*$//|:noh
"Executes current file as script
    inoremap <F9> <Esc>:w<CR>:silent !chmod u+x '%:p'<CR>:Texec ./%:r.%:e<C-m>
    nnoremap <F9> <Esc>:w<CR>:silent !chmod u+x '%:p'<CR>:Texec ./%:r.%:e<C-m>
    
"Copy to and paste from Clipboard
    map <C-a> "+y
    map! <C-f> <Esc>"+pi

"Turn recording key off"
    nnoremap Q q
    nnoremap q <Nop>
"}}}

""""""""""""""""""""""""""""""
" Snippets 
""""""""""""""""""""""""""""""
"{{{ 

"HTML {{{
    autocmd FileType html inoremap <leader>html <Esc>:-1read $HOME/.vim/template.html<CR> "Load html template
    autocmd FileType html inoremap <leader>h <html><head><Enter><title><++></title><meta charset="UTF-8"> <Esc><<i<Enter></head><body> <Esc><<i<Enter><p><++></p><Enter><++><Enter></body></html><Enter><Esc>gg0
    autocmd FileType html inoremap <leader>b <b></b><Space><++><Esc>FbT>i
    autocmd FileType html inoremap <leader>it <em></em><Space><++><Esc>FeT>i
    autocmd FileType html inoremap <leader>1 <h1></h1><Enter><Enter><++><Esc>2kf<i
    autocmd FileType html inoremap <leader>2 <h2></h2><Enter><Enter><++><Esc>2kf<i
    autocmd FileType html inoremap <leader>3 <h3></h3><Enter><Enter><++><Esc>2kf<i
    autocmd FileType html inoremap <leader>p <p></p><Enter><Enter><++><Esc>02kf>a
    autocmd FileType html inoremap <leader>a <a<Space>href=""><++></a><Space><++><Esc>14hi
    autocmd FileType html inoremap <leader>e <a<Space>target="_blank"<Space>href=""><++></a><Space><++><Esc>14hi
    autocmd FileType html inoremap <leader>ul <ul><Enter><li></li><Enter></ul><Enter><Enter><++><Esc>03kf<i
    autocmd FileType html inoremap <leader>li <Esc>o<li></li><Esc>F>a
    autocmd FileType html inoremap <leader>ol <ol><Enter><li></li><Enter></ol><Enter><Enter><++><Esc>03kf<i
    autocmd FileType html inoremap <leader>im <img src="" alt="<++>"><++><esc>Fcf"a
    autocmd FileType html inoremap <leader>td <td></td><++><Esc>Fdcit
    autocmd FileType html inoremap <leader>tr <tr></tr><Enter><++><Esc>kf<i
    autocmd FileType html inoremap <leader>th <th></th><++><Esc>Fhcit
    autocmd FileType html inoremap <leader>tab <table><Enter></table><Esc>O
    autocmd FileType html inoremap <leader>gr <font color="green"></font><Esc>F>a
    autocmd FileType html inoremap <leader>rd <font color="red"></font><Esc>F>a
    autocmd FileType html inoremap <leader>yl <font color="yellow"></font><Esc>F>a
    autocmd FileType html inoremap &<space> &amp;<space>
"}}}

"MARKDOWN {{{
    autocmd Filetype markdown,rmd map <leader>w yiWi[<esc>Ea](<esc>pa)
    autocmd Filetype markdown,rmd inoremap <leader>n ---<Enter><Enter>
    autocmd Filetype markdown,rmd inoremap <leader>b ****<++><Esc>F*hi
    autocmd Filetype markdown,rmd inoremap <leader>s ~~~~<++><Esc>F~hi
    autocmd Filetype markdown,rmd inoremap <leader>e **<++><Esc>F*i
    autocmd Filetype markdown,rmd inoremap <leader>h ====<Space><++><Esc>F=hi
    autocmd Filetype markdown,rmd inoremap <leader>i ![](<++>)<++><Esc>F[a
    autocmd Filetype markdown,rmd inoremap <leader>a [](<++>)<++><Esc>F[a
    autocmd Filetype markdown,rmd inoremap <leader>1 #<Space><Enter><++><Esc>kA
    autocmd Filetype markdown,rmd inoremap <leader>2 ##<Space><Enter><++><Esc>kA
    autocmd Filetype markdown,rmd inoremap <leader>3 ###<Space><Enter><++><Esc>kA
    autocmd Filetype markdown,rmd inoremap <leader>l --------<Enter>
    autocmd Filetype markdown,rmd inoremap <leader>r ```{r}<CR>```<CR><CR><esc>2kO
    autocmd Filetype markdown,rmd inoremap <leader>p ```{python}<CR>```<CR><CR><esc>2kO
    autocmd Filetype markdown,rmd inoremap <leader>c ```<cr>```<cr><cr><esc>2kO
"}}}

"Python {{{
    " set nofoldenable
    autocmd Filetype python inoremap <leader>d <CR>def <++>(*ar, **kw):<CR><++><CR><CR><esc>4k0
"}}}

"}}}

""""""""""""""""""""""""""""
"Startup commands
""""""""""""""""""""""""""""
au! BufWritePost .vimrc source %    "Reload .vimrc automatically on change
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif
noh
