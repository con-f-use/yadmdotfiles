#!/usr/bin/python

import logging, os, sys
from logging import info, debug, error, warning as warn

logcfg = dict(
    level=logging.INFO,
    format='[%(levelname)-3.3s](%(lineno)4s:%(filename)s): %(message)s',
    datefmt='%y.%m.%d %H:%M',
    stream=sys.stderr,
)


try:
    import coloredlogs

    # coloredlogs.install(fmt=logcfg['format'])
    logcfg['fmt'] = logcfg['format']
    coloredlogs.install(**logcfg)
except ImportError:
    logging.basicConfig(**logcfg)
    warn("Logs will not be colored (;_;)")

warn("Using startup file: '%s'", __file__)

# Aliases for copy&pasting json
try:
    import __builtin__
except:
    import builtins as __builtin__
__builtin__.true = True
__builtin__.false = False
__builtin__.null = None


# Standard Library
import stat, subprocess, gzip, re, math, glob, time, random, tempfile
import functools, operator, itertools, datetime, time, string
import importlib, json, binascii, hashlib, platform, socket, collections
import textwrap, base64 as b64, inspect, dis
from pprint import pprint, pformat
import tarfile as tf, zipfile as zf
try:
    from OpenSSL import crypto, SSL
except ImportError:
    pass

from operator import methodcaller as meth, attrgetter as attr, itemgetter as item
from itertools import starmap, permutations, repeat, groupby, product
from functools import partial, wraps, reduce

try:
    from pathlib2 import Path as P  # Python 2

    P().expanduser()
except (ImportError, AttributeError):
    from pathlib import Path as P  # Python 3


# Try to import additional variables and packages
pkgs = {
    'tzlocal',
    'dateutil',
    'numpy',
    'seaborn',
    'docopt-ng',
    'arrow',
    'pint',
    'Gnuplot',
    'tabulate',
    'appdirs',
    'click',
    'attrs',
    'pandas',
    'requests',
}

if 'jcgbx' in platform.node():
    locals().update({k: v for k, v in os.environ.items() if k.startswith('FBOS_')})
    if sys.version_info.major < 3:
        pkgs += ['pyapi', 'lib', 'libs']

nopes = set()
for pkg in pkgs:
    try:
        globals()[pkg] = importlib.import_module(pkg)
    except (ImportError, SyntaxError):
        nopes.add(str(sys.exc_info()[1]).replace('No module named ',''))
if nopes:
    warn("Packages not imported: %s", ", ".join(nopes))

# Special settings for matplotlib
try:
    import matplotlib as mpl
except (ImportError, SyntaxError):
    debug("Package not imported: %s", exc_info=True)  #sys.exc_info()[1])
else:
    if 'DISPLAY' not in os.environ:
        mpl.use('agg')  # or 'Pdf' BEFORE importing pyplot
    if 'ipykernel' not in sys.modules:
        mpl.rcParams['text.usetex'] = True
        mpl.rcParams['text.latex.unicode'] = True
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm


def static_vars(**kwargs):
    """Decorator to add something similar to a static variable in C."""

    def decorate(func):
        for k in kwargs:
            setattr(func, k, kwargs[k])
        return func

    return decorate


def isstr(s):
    """Python 2/3 compatible way to check if `s` is a string."""
    if sys.version_info[0] == 3:
        return isinstance(s, str)
    return isinstance(s, basestring)


def importupdate(*packs):
    """Try to update/install packages if import fails."""
    import importlib

    try:
        import pip
    except:
        import ensurepip

        ensurepip.bootstrap(upgrade=True)
        os.execve(sys.argv[0], sys.argv, os.environ)
    for pack in packs:
        try:
            importlib.import_module(pack)
        except ImportError:
            pip.main(['install', '-U', pack])
            error('Install/upgrade `' + pack + '` manually')
        finally:
            globals()[pack] = importlib.import_module(pack)


class UTC(datetime.tzinfo):
    """Python2/3 compatible utc timezone class.

    Python3 has `datetime.timezone.utc`.
    """
    _ZERO = datetime.timedelta(0)
    def utcoffset(self, dt): return self._ZERO
    def tzname(self, dt): return "UTC"
    def dst(self, dt): return self._ZERO
timezone_utc = UTC()


# logging:
# filename = args['--logfile'] if args['--logfile']  else None,   # Takes precendence over 'stream'
# mode     = 'a'
# logging.basicConfig(level=logging.INFO,format="[%(levelname)7s]  (%(filename)s:%(lineno)s) %(message)s", datefmt='%y.%m.%d %H:%M')
# filename="logfile.log" / stream=sys.stderr / mode=append
# %(asctime)s also: process(Name), thred(Name), module, funcName
# [logging.root.removeHandler(handler) for handler in logging.root.handlers[:]] # to be able to call basicConfig again

# Some variables to play around with
r = re.compile(
    r'([-+]?\d*\.?\d+([eE][-+]?[0-9]+)?)'
)  # floating point number literals regex
t = datetime.date.today()
d = {1: 'one', '2': 'two', 'lst': [1, 2, 3]}
l = ['aa', 'bb', 'cc'] + d['lst']
s = "This is a test string"
M = [[11, 12, 13, 14], [21, 22, 23, 24], [31, 32, 33, 34]]
p = '~/.local/share/Trash/info/tasks.json.trashinfo'
try:
    p = P(p).expanduser()
except:
    pass
info('start python without PYTHON* env vars (disbles all of this): python -E ...')
info('vars:\nd: dict  l: list  s: string  M: matrix  p: path  t:today  r:flrex')
info('funcs:\nmeth attr item starmap permutations repeat groupby product partial wraps reduce')

import readline

historyPath = os.path.expanduser("~/.cache/pyhistory")

def save_history(historyPath=historyPath):
    import readline
    readline.write_history_file(historyPath)

if os.path.exists(historyPath):
    readline.read_history_file(historyPath)

#import atexit
#atexit.register(save_history)
